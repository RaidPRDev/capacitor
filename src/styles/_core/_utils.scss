/**
  Text Clamp
*/
@mixin textClamp($numOfColumns: 3) {

  display: -webkit-box;
  -webkit-line-clamp: $numOfColumns;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

@mixin ellipses() {
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}

@mixin sup($offset: 4px) {
  vertical-align: baseline;
  line-height: 0;
  top: 0;
  left: $offset;
}

@mixin grayscale($value: 100%) {
  filter: $value;
  -webkit-filter: grayscale($value);
  -moz-filter:    grayscale($value);
  -ms-filter:     grayscale($value);
  -o-filter:      grayscale($value);
}

/**
  Breakpoint tools
*/
@mixin querymaxheight($breakpoint) {
  @media (max-height: $breakpoint) {
    @content;
  }
}

@mixin querycustommax($breakpoint) {
  @media (max-width: $breakpoint) {
    @content;
  }
}

@mixin querycustommin($breakpoint) {
  @media (min-width: $breakpoint) {
    @content;
  }
}

@mixin querymin($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  }
 
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin queryheightmin($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints-height, $breakpoint) {
    // Prints a media query based on the value
    @media (min-height: map-get($breakpoints-height, $breakpoint)) {
      @content;
    }
  }
 
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints-height)}.";
  }
}

@mixin querymax($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media (max-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  }
 
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}


@mixin getFontSize($font-key) {
  // If the key exists in the map
  @if map-has-key($font-size, $font-key) {
    font-size: map-get($font-size, $font-key);
    line-height: map-get($font-leading, $font-key);
  }
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$font-size}`. "
        + "Available [font-size] are: #{map-keys($font-size)}.";
  }
}

@mixin renderPhoneTemplate() {
  // Render phone template if not on a mobile device
  // Note: value set in vite.config.ts
  @if $is-mobile == false {
    
    background-color: rgb(239, 238, 237);
    background-image: url(/assets/iphone_14.png);
    background-size: 437px;
    background-repeat: no-repeat;
    background-position: center center;
    display: flex;
    align-items: center;
    justify-content: center;
  }
 
  @else {}
}

@mixin makeTextSelectable() {
  -moz-user-select: text;
  -khtml-user-select: text;
  -webkit-user-select: text;
  -ms-user-select: text;
  user-select: text;
}

@mixin setInputPlaceholder($pFont: Arial, $pColor: black, $text-transform: none) {
  &::placeholder {
      // Chrome, Firefox, Opera, Safari 10.1+
      font-family: $pFont;
      color: $pColor;
      text-transform: $text-transform;
  }
  &:-ms-input-placeholder {
      // Internet Explorer 10-11
      font-family: $pFont;
      color: $pColor;
      text-transform: $text-transform;
  }
  &::-ms-input-placeholder {
      // Microsoft Edge
      font-family: $pFont;
      color: $pColor;
      text-transform: $text-transform;
  }
}